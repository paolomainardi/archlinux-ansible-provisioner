---
- name: Configure swapfile
  tags: [system, swapfile]
  when: swapfile.enabled == true | default(false)
  become: yes
  block:
    - name: Create a temporary mount point for btrfs device
      shell: mkdir -p "{{ swapfile.btrfs_temporary_mount_point }}"

    - name: Mount the btrfs device
      shell: mount -o noatime,compress=zstd,subvol=/ "{{ swapfile.btrfs_device }}" "{{ swapfile.btrfs_temporary_mount_point }}"

    - name: Check if subvolume already exists
      shell: btrfs subvolume show "{{ swapfile.btrfs_temporary_mount_point }}/{{ swapfile.btrfs_volume_name }}"
      ignore_errors: true
      register: btrfs_subvolume_exists

    - name: Create the btrfs swap subvolume
      when: btrfs_subvolume_exists.rc != 0
      shell: btrfs subvolume create "{{ swapfile.btrfs_temporary_mount_point }}/{{ swapfile.btrfs_volume_name }}"

    - name: Unmount the btrfs device
      shell: umount "{{ swapfile.btrfs_temporary_mount_point }}"

    - name: Create the mount point for the swap subvolume
      file:
        path: "{{ swapfile.btrfs_volume_mountpoint }}"
        state: directory

    - name: Get UUID of btrfs device
      shell: blkid -s UUID -o value "{{ swapfile.btrfs_device }}"
      register: btrfs_device_uuid

    - name: Add swap btrfs volume to fstab
      lineinfile:
        path: /etc/fstab
        line: "UUID={{ btrfs_device_uuid.stdout }} {{ swapfile.btrfs_volume_mountpoint }} btrfs noatime,compress=zstd,subvol={{ swapfile.btrfs_volume_name }} 0 0"
        state: present
        create: yes

    - name: Mount all the devices in fstab
      shell: mount -a

    - name: Check if swapfile already exists
      shell: ls -l "{{ swapfile.btrfs_volume_mountpoint }}/{{ swapfile.filename }}"
      ignore_errors: true
      register: swapfile_exists

    - name: Turn off swapfile
      when: swapfile_exists.rc == 0
      shell: swapoff "{{ swapfile.btrfs_volume_mountpoint }}/{{ swapfile.filename }}"
      ignore_errors: true # Ignore errors if swapfile is not active

    - name: Delete swapfile
      when: swapfile_exists.rc == 0
      file:
        path: "{{ swapfile.btrfs_volume_mountpoint }}/{{ swapfile.filename }}"
        state: absent

    - name: Create swapfile
      shell: btrfs filesystem mkswapfile --size "{{ swapfile.size }}" --uuid clear "{{ swapfile.btrfs_volume_mountpoint }}/{{ swapfile.filename }}"

    - name: Activate swapfile
      shell: swapon "{{ swapfile.btrfs_volume_mountpoint }}/{{ swapfile.filename }}"

    - name: Add swapfile to fstab
      lineinfile:
        path: /etc/fstab
        line: "{{ swapfile.btrfs_volume_mountpoint }}/{{ swapfile.filename }} none swap defaults 0 0"
        state: present
        create: yes

    - name: Configure hibernate to use the swapfile
      when: swapfile.configure_hibernate == true | default(false)
      vars:
        resume_kernel_parameters_comment_line: "# Resume from hibernation using swapfile"
      block:
        - name: Get resume partition UUID
          shell: blkid $(df -T "{{ swapfile.btrfs_volume_mountpoint }}/{{ swapfile.filename }}" | tail -n 1 | awk '{ print $1 }') -s UUID -o value
          register: swapfile_uuid

        - name: Acquire swap file offset
          shell: btrfs inspect-internal map-swapfile -r "{{ swapfile.btrfs_volume_mountpoint }}/{{ swapfile.filename }}"
          register: swapfile_offset

        - name: Remove resume comment
          lineinfile:
            path: /etc/mkinitcpio.conf
            regexp: "^{{ resume_kernel_parameters_comment_line }}$"
            state: absent

        - name: Remove old resume parameter
          lineinfile:
            path: /etc/mkinitcpio.conf
            regexp: "^resume="
            state: absent

        - name: Remove old resume_offset parameter
          lineinfile:
            path: /etc/mkinitcpio.conf
            regexp: "^resume_offset="
            state: absent

        - name: Add resume configuration to kernel parameters
          vars:
            resume_kernel_paramenters: |
              {{ resume_kernel_parameters_comment_line }}
              resume=UUID={{ swapfile_uuid.stdout }}
              resume_offset={{ swapfile_offset.stdout }}
          lineinfile:
            path: /etc/mkinitcpio.conf
            line: "{{ resume_kernel_paramenters }}"
            state: present

        - name: Regenerate initramfs
          command: mkinitcpio -P

        - name: Change grub configuration
          replace:
            path: /etc/default/grub
            regexp: "resume=PARTLABEL=swap"
            replace: "resume=UUID={{ swapfile_uuid.stdout }} resume_offset={{ swapfile_offset.stdout }}"
          notify: Update grub

        - name: "Regenerate GRUB config"
          command: grub-mkconfig -o /boot/grub/grub.cfg

        - name: Add loging environment variable SYSTEMD_BYPASS_HIBERNATION_MEMORY_CHECK configured to 1
          vars:
            logind_environment_variable: |
              [Service]
              Environment=SYSTEMD_BYPASS_HIBERNATION_MEMORY_CHECK=1
          lineinfile:
            path: /etc/systemd/logind.conf
            line: "{{ logind_environment_variable }}"
            state: present
